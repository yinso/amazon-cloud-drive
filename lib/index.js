// Generated by CoffeeScript 1.10.0
(function() {
  var CloudDrive, EventEmitter, app, express, opener, request, url;

  express = require('express');

  app = express();

  url = require('url');

  opener = require('opener');

  EventEmitter = require('events').EventEmitter;

  request = require('request');

  CloudDrive = (function() {
    function CloudDrive(options) {
      var callbackUrl, clientID, clientSecret, scopes, username;
      if (!(this instanceof CloudDrive)) {
        return new CloudDrive(options);
      }
      username = options.username, clientID = options.clientID, clientSecret = options.clientSecret, scopes = options.scopes, callbackUrl = options.callbackUrl;
      Object.defineProperties(this, {
        username: {
          value: username,
          writable: false,
          enumerable: false
        },
        clientID: {
          value: clientID,
          writable: false,
          enumerable: false
        },
        clientSecret: {
          value: clientSecret,
          writable: false,
          enumerable: false
        },
        scopes: {
          value: scopes || ['clouddrive:read_all', 'clouddrive:write'],
          writable: false,
          enumerable: false
        },
        callbackUrl: {
          value: callbackUrl || 'http://localhost:45002/cloud-drive-callback',
          writable: false,
          enumerable: false
        }
      });
    }

    CloudDrive.prototype.authenticate = function(cb) {
      var amazonOAUri, callbackUri, self;
      self = this;
      callbackUri = url.parse(this.callbackUrl);
      app.get(callbackUri.pathname, function(req, res, next) {
        if (req.query.error) {
          console.error('aws.cloud-drive-callback:error', req.query);
          res.status(400).json(req.query);
          return cb(req.query);
        } else {
          console.log('aws.cloud-drive-callback', req.query);
          res.json(req.query);
          return self.getOAuthToken(req.query, function(err, result) {
            if (err) {
              return cb(err);
            } else {
              return cb(null, result);
            }
          });
        }
      });
      app.listen(callbackUri.port);
      amazonOAUri = url.parse("https://www.amazon.com/ap/oa");
      amazonOAUri.query = {
        clien_id: this.clientID,
        scope: this.scopes.join(' '),
        response_type: 'code',
        redirect_uri: this.callbackUrl
      };
      return opener(url.format(amazonOAUri));
    };

    CloudDrive.prototype.authRefresh = function(expiresSeconds) {
      var self;
      self = this;
      if (self.refreshID) {
        clearTimeout(self.refreshID);
      }
      return self.refreshID = setTimeout(function() {
        return self.getOAuthToken({
          code: self.code
        }, function(err, res) {
          if (err) {
            return self.emit('error', err);
          } else {
            return self.emit('authenticated', res);
          }
        });
      });
    };

    CloudDrive.prototype.getOAuthToken = function(arg, cb) {
      var code, oAuthUrl, options, self;
      code = arg.code;
      self = this;
      oAuthUrl = 'https://api.amazon.com/auth/o2/token';
      options = {
        method: 'POST',
        url: oAuthUrl,
        form: {
          grant_type: 'authorization_code',
          code: code,
          client_id: this.clientID,
          client_secret: this.clientSecret,
          redirect_uri: this.callbackUri
        },
        json: true
      };
      return request(options, function(err, res, body) {
        if (err) {
          return cb(err);
        } else if (res.statusCode >= 400) {
          return cb(res.body);
        } else {
          result.code = code;
          self.code = code;
          self.accessToken = result.access_token;
          self.refreshToken = result.refresh_token;
          self.authRefresh(result.expires_in);
          return cb(null, body);
        }
      });
    };

    return CloudDrive;

  })();

  module.exports = CloudDrive;

}).call(this);
